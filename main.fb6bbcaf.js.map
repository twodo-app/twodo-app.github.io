{"version":3,"sources":["../node_modules/elm-promisify/index.js","js/main.js"],"names":["hasPromise","window","promisify","elm","node","flags","app","init","then","f","requestAnimationFrame","Promise","prepare","document","querySelector","Elm","Main"],"mappings":";;ACAA;;AACA;;ADDA,ACGA,IAAMI,EDHAJ,ECGI,GAAGa,KDHG,GAAG,ACGE,CAACC,YDHUb,CCGnB,CAAuB,IDHpC,EAEA,MCCa,CAAb;ADAA,ACCA,IAAMI,KAAK,GAAG,EAAd;ADAA,ACIA,6BAAUU,UAAIC,IAAd,EAAoB;ADHpB,ACGsBZ,EAAAA,IAAI,EAAJA,IAAF;ADFpB,ACE4BC,EAAAA,KAAK,EAALA;ADD5B,ACCoB,CAApB,EACGG,IADH,CACQ,UAAAF,GAAG,EAAI,CAEZ,CAHH;ADAA;AACA;AACA;;AACO,MAAMJ,SAAS,GAAG,CAACC,GAAD,EAAM;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAK,GAAG;AAAhB,CAAN,KAA+B;AACtD,QAAMC,GAAG,GAAGH,GAAG,CAACI,IAAJ,CAAS;AAAEH,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAT,CAAZ;;AACA,QAAMG,IAAI,GAAGC,CAAC,IAAIR,MAAM,CAACS,qBAAP,CAA6B,MAAMD,CAAC,CAACH,GAAD,CAApC,CAAlB,CAFsD,CAItD;AACA;;;AACA,SAAON,UAAU,GAAG,IAAIW,OAAJ,CAAYH,IAAZ,CAAH,GAAuB;AAAEA,IAAAA;AAAF,GAAxC;AACD,CAPM,EASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACO,MAAMI,OAAO,GAAGT,GAAG,KAAK;AAC7BI,EAAAA,IAAI,CAAE;AAAEH,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAF,EAAmB;AACrB,WAAOH,SAAS,CAACC,GAAD,EAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAN,CAAhB;AACD;;AAH4B,CAAL,CAAnB,EAMP;AACA;;;;eACeH","file":"main.fb6bbcaf.js","sourceRoot":"../src","sourcesContent":["const hasPromise = 'Promise' in window\n\n// Promisify an elm app to guarantee the app has rendered at least once before\n// we start doing things.\n//   const node = document.querySelector('#app')\n//   const flags = {}\n//\n//   promisify(Elm.Main, { node, flags })\n//     .then(app => {\n//       ...\n//     })\nexport const promisify = (elm, { node, flags = {} }) => {\n  const app = elm.init({ node, flags })\n  const then = f => window.requestAnimationFrame(() => f(app))\n\n  // If the browser doesn't have native Promise support, we return a 'thenable'\n  // which mimics the Promise API.\n  return hasPromise ? new Promise(then) : { then }\n}\n\n// Takes an un-initialised elm app (such as Elm.Main) and returns an objbect\n// that mimics the elm app API. Essentially a means of \"defering\" the promisify\n// process if you don't want to init your app right away.\n//   const node = document.querySelector('#app')\n//   const flags = {}\n//\n//   const elm = prepare(Elm.Main, { node, flags })\n//\n//   elm.init({ node, flags })\n//     .then(app => {\n//       ...\n//     })\nexport const prepare = elm => ({\n  init ({ node, flags }) {\n    return promisify(elm, { node, flags })\n  }\n})\n\n// Default export is promisify because I expect that is the one more likely to\n// be used\nexport default promisify\n","import { Elm } from '../elm/Main.elm'\nimport { promisify } from 'elm-promisify'\n\nconst node = document.querySelector('[data-elm]')\nconst flags = {\n\n}\n\npromisify(Elm.Main, { node, flags })\n  .then(app => {\n\n  })\n"]}